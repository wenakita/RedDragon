---
description: 
globs: 
alwaysApply: true
---
# Dragon Project Rules

## Function Visibility & Security
- `processBuy`, `processSwapWithScratcher`, `processSwapWithPromotion`, `processEntry` must be internal.
- `registerWinningScratcher` should only be callable by goldScratcher.
- Be cautious with `msg.sender` usage throughout the codebase.

## Contract Inheritance & Interface Compliance
- Use OpenZeppelin 4.9.0+ contracts for compatibility with Solidity 0.8.20.
- Ensure the Ownable constructor is properly called with no arguments.
- Verify IDragon interface functions are properly implemented in Dragon.sol.
- Ensure all `override` keywords match actual parent functions.
- Remove `override` from functions that don't override anything.
- When using `super` calls, verify the function exists in parent contracts.
- Avoid multiple inheritance conflicts with clear override specifications.

## Configuration
- Use a consistent naming standard: $DRAGON token should have a single variable reference.
- Keep VRF configuration unified (don't duplicate coordinator references).
- Remove all USD-based entry logic since it's not being used.
- Don't include unused features like multisig configuration if not needed.

## Mathematical Improvements
- Use a non-linear scaling function (cube root) for the voting power multiplier.
- Make `maxVP` configurable or adjust based on real-world data.
- Pre-calculate the maximum boost for gas optimization.
- Refactor the boost capping logic to be more efficient.

## Tokenomics & Fee Structure
- A 10% fee is applied to all buys and sells of $DRAGON.
- Buy fees are distributed: 
  - 6.9% to jackpot
  - 2.41% to ve69LPfeedistributor
- Sell fees are distributed: 
  - 6.9% to jackpot
  - 2.41% to ve69LPfeedistributor
- The lottery is triggered only when a user swaps wS for DRAGON.
- The user who executes the swap (`tx.origin`) is awarded, not aggregators or bots.
- 0.69% of DRAGON is burned for all transfers.

## Probability system:
- Base unit: $1 USD gives 0.0004% chance of winning (4 out of 1,000,000)
- Maximum: $10,000 USD gives 4% chance of winning (40,000 out of 1,000,000)
- Scaling: Linear interpolation between $1 and $10,000
- ve69LP boost: Up to 2.5x boost using cube root scaling

## Integration & External Systems
- Use proper Beets (Balancer fork) integration variables for Sonic chain.
- Ensure VRF subscription settings are correctly configured.
- Verify interface compatibility with all integrated contracts.
- Test cross-contract interactions thoroughly before deployment.

